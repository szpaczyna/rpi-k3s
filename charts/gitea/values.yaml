## Gitea image
## ref: https://hub.docker.com/r/gitea/gitea/tags/
##
nameOverride: gitea
fullnameOverride: gitea

images:
  gitea: gitea/gitea:latest
  postgres: "postgres:alpine"
  memcached: "memcached:alpine"
  imagePullPolicy: Always
  ## Specify imagePullSecrets
  ## ref: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
  ##
  # imagePullSecrets: myregistrykey
## cache settings
memcached:
  maxItemMemory: 64
  verbosity: v
  extendedOptions: modern
## ingress settings - Optional
ingress:
  enabled: true
  ## sets .ini PROTOCOL value
  # protocol: https
  ## annotations used by the ingress - ex for k8s nginx ingress controller:
  ingress_annotations:
  #   kubernetes.io/ingress.class: traefik
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.frontend.redirect.permanent: 'true'
    traefik.ingress.kubernetes.io/frontend-entry-points: http, https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
  #   kubernetes.io/ingress.class: nginx
  #   nginx.ingress.kubernetes.io/proxy-body-size: "0"
  #   nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
  #   nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
## tls support for the ingress
  tls:
  - secretName: gitea-shpaq-org-tls
    hosts:
      - 'gitea.shpaq.org'

## chart defaults to using an ingress for http, but change to LoadBalancer if using you cluster supports it
service:
  http:
    serviceType: ClusterIP
    port: 3000
    # nodePort: 30280
    # sometimes if is necesary to access through an external port i.e. http(s)://<dns-name>:<external-port>
    externalPort: 3000
    externalHost: gitea.shpaq.org
    # some parts of gitea like the api use a redirect needs config if using non standard ports
    # httpAPIPort: 8280
    # if serviceType is LoadBalancer
    # loadBalancerIP: "192.168.0.100"
    # svc_annotations:
    #   service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    #   service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "a_subnet"
  ssh:
    serviceType: LoadBalancer
    port: 2222
    #nodePort: 30222
    # if serving on a different external port used for determining the ssh url in the gui
    externalPort: 2222
    externalHost: gitea.shpaq.org
    # if serviceType is LoadBalancer
    # loadBalancerIP: "10.0.0.2"
    # svc_annotations:
    #   service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    #   service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "a_subnet"
## Configure resource requests and limits
## ref: http://kubernetes.io/docs/user-guide/compute-resources/
##
resources:
  gitea:
    requests:
      memory: 256Mi
      cpu: 1000m
    limits:
      memory: 512Mi
      cpu: 2
  postgres:
    requests:
      memory: 200Mi
      cpu: 200m
    limits:
      memory: 256Mi
      cpu: 2
  memcached:
    requests:
      memory: 64Mi
      cpu: 50m
## Enable persistence using Persistent Volume Claims
## ref: http://kubernetes.io/docs/user-guide/persistent-volumes/
## ref:
##
persistence:
  enabled: true
  # existingGiteaClaim: gitea-gitea
  # existingPostgresClaim: gitea-postgres
  giteaSize: 5Gi
  postgresSize: 2Gi
  storageClass: local-path
  accessMode: ReadWriteOnce
## addtional annotations for hte pvcs  uncommenting below will prevent helm from deleting the pvc when hte chart is deleted
#  annotations:
#    "helm.sh/resource-policy": keep

## if you want to mount a volume directly without using a storageClass or pvcs
#  directGiteaVolumeMount:
#    glusterfs:
#      endpoints: "192.168.1.1 192.168.1.2 192.168.1.3"
#      path: giteaData
#  directPostgresVolumeMount:
#    glusterfs:
#      endpoints: "192.168.1.1 192.168.1.2 192.168.1.3"
#      path: giteaPostgresData

# Connect to an external database
# externalDB:
#   dbUser: "postgres"
#   dbPassword: "<MY_PASSWORD>"
#   dbHost: "service-name.namespace.svc.cluster.local" # or some external host
#   dbPort: "5432"
#   dbDatabase: "gitea"

# valid types: postgres, mysql, mssql, sqllite
dbType: "postgres"
useInPodPostgres: true
inPodPostgres:
  secret: postgresecrets
  subPath: "postgresql-db"
  dataMountPath: /var/lib/postgresql/data/pgdata
  # Create a database user
  # Default: postgres
  # postgresUser:
  # Default: random 10 character string
  # postgresPassword:

  # Inject postgresPassword via a volume mount instead of environment variable
  usePasswordFile: false
  # Use Existing secret instead of creating one
  # It must have a postgres-password key containing the desired password
  # existingSecret: 'secret'

  # Create a database
  # Default: the postgres user
  postgresDatabase: gitea
  # Specify initdb arguments, e.g. --data-checksums
  # ref: https://github.com/docker-library/docs/blob/master/postgres/content.md#postgres_initdb_args
  # ref: https://www.postgresql.org/docs/current/static/app-initdb.html
  # postgresInitdbArgs:

  ## Specify runtime config parameters as a dict, using camelCase, e.g.
  ## {"sharedBuffers": "500MB"}
  ## ref: https://www.postgresql.org/docs/current/static/runtime-config.html
  # postgresConfig:
# Node labels and tolerations for pod assignment
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
# ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature

nodeSelector:
  kubernetes.io/role: worker
  kubernetes.io/os: linux

tolerations:
  - key: "CriticalAddonsOnly"
    operator: "Exists"
  - key: "node-role.kubernetes.io/master"
    operator: "Exists"
    effect: "NoSchedule"  

affinity: {}

## Annotations for the deployment and nodes.
deploymentAnnotations: {} 
podAnnotations:
  prometheus.io/scrape: "true" 
  prometheus.io/port: "3000"

# In order to disable initial install screen you must have secretKey and disableInstaller=true
config:
  secretKey: moW1oy1SM3ey7cCTgoUriI87sgqLkSBc
  disableInstaller: false
  offlineMode: false
  requireSignin: false
  disableRegistration: false
  openidSignin: true
  notifyMail: false
  mailer:
    enabled: false
    host: smtp.gmail.com
    port: 587
    tls: false
    from: ""
    user: ""
    passwd: ""
  metrics:
    enabled: true
    token: ""

# Here you can set extra settings from https://docs.gitea.io/en-us/config-cheat-sheet/
# The following is just an example
extra_config: |-
  RUN_MODE = prod
 
  [ui]
  DEFAULT_THEME = arc-green
  
  [ssh.minimum_key_sizes]
  RSA = 8192
  ED25519 = 512
  
  [indexer]
  ISSUE_INDEXER_TYPE = db
  REPO_INDEXER_ENABLED = true
  
  [session]
  COOKIE_SECURE = true
  
  [time]
  DEFAULT_UI_LOCATION = Europe/Warsaw
  
  [i18n]
  LANGS = en-US
  NAMES = English
  
  [i18n.datelang]
  en-US = en
  
  [other]
  SHOW_FOOTER_BRANDING = true
  
  [server]
  ROOT_URL = https://gitea.shpaq.org
  SSH_ROOT_PATH = /data/git/.ssh
  SSH_EXPOSE_ANONYMOUS = true
  LFS_START_SERVER = true
  
  [ui.meta]
  AUTHOR = Szpacze Gniazdo
  
  [security]
  INSTALL_LOCK = false
  SECRET_KEY = moW1oy1SM3ey7cCTgoUriI87sgqLkSBc
  
  [log]
  MODE = console
  ENABLE_ACCESS_LOG = true

  [log.x]
  COLORIZE = true

  [metrics]
  ENABLED = true
  TOKEN=
