---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "name" . }}
  labels:
    chart: {{ .Chart.Name}}-{{ .Chart.Version | replace "+" "_" }}
    app: {{ template "name" . }}
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
  {{- if .Values.statefulsetAnnotattions }}
  annotations:
    backup.velero.io/backup-volumes: {{ template "name" . }}-data
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  serviceName: {{ template "name" . }}
  selector:
    matchLabels:
      app: {{ template "name" . }}
  template:
    metadata:
      labels:
        app: {{ template "name" . }}
# TODO
#      annotations:
#        prometheus.io/scrape: "true"
#        prometheus.io/port: "9311"
#        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: kubernetes.io/os
                  operator: In
                  values:
                  - linux
      hostNetwork: false
      dnsPolicy: "None"
      {{- if .Values.serviceaccount }}
      serviceAccountName: {{ .Values.serviceaccount }}
      {{- end }}
      dnsConfig:
        nameservers:
        - {{ .Values.dns.local.ns1 }}
        - {{ .Values.dns.local.ns2 }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
{{ toYaml . | indent 8 }}
    {{- end }}
      hostAliases:
      - ip: 127.0.0.1
        hostnames:
        - {{ .Values.ingress.host }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ .Values.image.image }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        stdin: true
        tty: true
        resources:
{{ toYaml .Values.resources | indent 12 }}
        env:
        - name: ServerIP
          value: "{{ .Values.env.serverip }}"
        - name: DNS1
          value: "{{ .Values.env.dns1 }}"
        - name: DNS2
          value: "{{ .Values.env.dns2 }}"
        - name: DNS3
          value: "{{ .Values.env.dns3 }}"
        - name: DNS4
          value: "{{ .Values.env.dns4 }}"
        - name: TZ
          value: "{{ .Values.env.timezone }}"
        - name: CONDITIONAL_FORWARDING
          value: "{{ .Values.env.condforwarding }}"
        - name: CONDITIONAL_FORWARDING_IP
          value: "{{ .Values.env.condforwardingip }}"
        - name: CONDITIONAL_FORWARDING_DOMAIN
          value: "{{ .Values.env.condforwardingdomain }}"
        - name: DNSSEC
          value: "{{ .Values.env.dnssec }}"
        - name: 'WEBUIBOXEDLAYOUT'
          value: 'traditional'
        - name: ADMIN_EMAIL
          valueFrom:
            secretKeyRef:
              name: pihole-admin-secret
              key: email
        - name: WEBPASSWORD
          valueFrom:
            secretKeyRef:
              name: pihole-admin-secret
              key: webpassword
        ports:
        - name: web
          containerPort: 81
        - name: dhcp
          containerPort: 67
          protocol: UDP
        - name: dns-tcp
          protocol: TCP
          containerPort: 53
        - name: dns-udp
          containerPort: 53
          protocol: UDP
        readinessProbe:
          exec:
            command: ['dig', '@127.0.0.1', 'google.com']
          timeoutSeconds: 20
          initialDelaySeconds: 5
          periodSeconds: 120
        livenessProbe:
          exec:
            command: ['dig', '@127.0.0.1', 'google.com']
          timeoutSeconds: 20
          initialDelaySeconds: 30
          periodSeconds: 180
        volumeMounts:
            - mountPath: "/etc/pihole"
              name: data
              subPath: "pihole"
            - mountPath: "/etc/dnsmasq.d"
              name: data
              subPath: "dnsmasq"
            - mountPath: "/etc/dnsmasq.d/05-custom.conf"
              name: {{ template "name" . }}-custom-config
              subPath: 05-custom.conf
            - mountPath: "/etc/pihole/whitelist.txt"
              name: {{ template "name" . }}-custom-config-list
              subPath: whitelist.txt
            - mountPath: "/etc/pihole/adlists.list"
              name: {{ template "name" . }}-custom-config-list
              subPath: adlists.list
            - mountPath: "/etc/pihole/regex.list"
              name: {{ template "name" . }}-custom-config-list
              subPath: regex.list
            - mountPath: "/etc/pihole/custom.list"
              name: {{ template "name" . }}-custom-config-list
              subPath: custom.list
# TODO
#      - name: pihole-exporter
#          image: "registry.shpaq.org/pihole_exporter:0.4.6"
#          imagePullPolicy: "Always"
#          ports:
#            - name: metrics
#              containerPort: 9311
#              hostPort: 9311
#          resources:
#            limits:
#              cpu: 100m
#              memory: 100Mi
#            requests:
#              cpu: 10m
#              memory: 24Mi
      terminationGracePeriodSeconds: 30
      volumes:
        - name: {{ template "name" . }}-custom-config
          configMap:
            name: {{ template "name" . }}-custom-config
        - name: {{ template "name" . }}-custom-config-list
          configMap:
            name: {{ template "name" . }}-custom-config-list
{{- if .Values.persistence.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
        - {{ .Values.persistence.accessMode | quote }}
{{- if .Values.persistence.storageClass }}
        storageClassName: "{{ .Values.persistence.storageClass }}"
{{- else }}
        storageClassName: ""
{{- end }}
        resources:
          requests:
            storage: {{ .Values.persistence.size | quote }}
{{- end }}
