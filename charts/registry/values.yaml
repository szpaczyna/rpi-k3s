# Default values for docker-registry.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

updateStrategy:
  type: RollingUpdate
  rollingUpdate:
  #   maxSurge: 1
    maxUnavailable: 0

podAnnotations: {}
podLabels: {}

deploymentAnnotations:
    backup.velero.io/backup-volumes: registry
image:
  repository: registry
  tag: 2.7.1
  pullPolicy: IfNotPresent
# imagePullSecrets:
    # - name: docker
service:
  name: registry
  type: ClusterIP
  #type: LoadBalancer
  # clusterIP:
  port: 5000
  # nodePort:
  #loadBalancerIP: 10.1.0.5
  # loadBalancerSourceRanges:
  annotations: {}
  # foo.io/bar: "true"
ingress:
  enabled: true
  classname: traefik-lb
  path: /
  hosts:
    - registry.shpaq.org
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    traefik.frontend.redirect.permanent: 'true'
    traefik.ingress.kubernetes.io/frontend-entry-points: http, https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
  labels: {}
  tls:
    - secretName: registry-shpaq-org-tls
      hosts:
      - registry.shpaq.org
resources:
  limits:
   cpu: 500m
   memory: 256Mi
  requests:
   cpu: 100m
   memory: 128Mi
persistence:
  accessMode: 'ReadWriteOnce'
  enabled: true
  size: 20Gi
  storageClass: 'local-path'

# set the type of filesystem to use: filesystem, s3
storage: filesystem

# Set this to name of secret for tls certs
# tlsSecretName: registry.docker.example.com
secrets:
  haSharedSecret: ""
  htpasswd: ""

secrets:
  haSharedSecret: ""
  htpasswd: ""

# Secrets for S3 access and secret keys
#   s3:
#     accessKey: ""
#     secretKey: ""

# Options for s3 storage type:
# s3:
#  region: us-east-1
#  regionEndpoint: s3.us-east-1.amazonaws.com
#  bucket: my-bucket
#  encrypt: false
#  secure: true

configData:
  version: 0.1
  log:
    fields:
      service: registry
  storage:
    cache:
      blobdescriptor: inmemory
    delete:
      enabled: true
  http:
    addr: :5000
    headers:
      X-Content-Type-Options: [nosniff]
      Access-Control-Allow-Origin: ['*']
      Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']
      Access-Control-Allow-Headers: ['Authorization']
      Access-Control-Max-Age: [1728000]
      Access-Control-Allow-Credentials: [true]
  health:
    storagedriver:
      enabled: true
      interval: 10s
      threshold: 3

securityContext:
  enabled: true
  runAsUser: 1000
  fsGroup: 1000

priorityClassName: ""

podDisruptionBudget: 
  #maxUnavailable: 1
  minAvailable: 1

nodeSelector: {}
#  kubernetes.io/os: linux
#  kubernetes.io/role: worker

affinity: {}

tolerations: []
fullnameOverride: "registry"

extraVolumeMounts: []
## Additional volumeMounts to the registry container.
#  - mountPath: /secret-data
#    name: cloudfront-pem-secret
#    readOnly: true

extraVolumes: []
## Additional volumes to the pod.
#  - name: cloudfront-pem-secret
#    secret:
#      secretName: cloudfront-credentials
#      items:
#        - key: cloudfront.pem
#          path: cloudfront.pem
#          mode: 511
