## zshrc  - ZSH Configuration file
## created 20160307
## updated 20201005
## updated 20201017
## by shpaq

umask 022

export TERM="screen-256color"
export EDITOR=/usr/bin/vim
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8
export LSCOLORS="Gxfxcxdxbxegedabagacad"
export WORDCHARS='*?_[]~\!##$%^<>|`@##$%^*()+?'

export HISTSIZE=500000
export HISTFILE=~/.history_zsh
export SAVEHIST=400000

autoload -U compinit promptinit tetris zcalc url-quote-magic colors zfinit
autoload -Uz vcs_info
compinit
colors
zfinit
promptinit

zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.zsh/cache
zstyle ':completion:*:(rm|kill|diff):*' ignore-line yes
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*' completer _expand _complete #_approximate #_correct
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}
zstyle ':completion:*:options' description 'yes'
#zstyle ':completion:*:options' auto-description '[%d]'
zstyle ':completion:*:descriptions' format '[%d]'
zstyle ':completion:*:(all-|)files' ignored-patterns '(|*/)CVS'
zstyle ':completion:*:cd:*' ignored-patterns '(*/)##CVS'
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*:processes' command 'ps xw -o pid,tty,time,args'
zstyle ':completion:*' menu select=long-list select=1
#zstyle ':completion:*:*:*:default' menu yes select search interactive

## git bullshit
zstyle ':vcs_info:*' enable git
() {
#    local formats=
#    local actionformats=
    zstyle ':vcs_info:*' stagedstr '%F{green}● '
    zstyle ':vcs_info:*' unstagedstr '%F{yellow}● '
    zstyle ':vcs_info:*' check-for-changes true
    zstyle ':vcs_info:*' actionformats '%F{5}(%F{2}%b%F{3}|%F{1}%a%F{5})%f %{$reset_color%}'
    zstyle ':vcs_info:*' formats '%F{red}%b%F{3}%c%F{3}%u%f%{$reset_color%}'
    zstyle ':vcs_info:git*' formats "%{$fg_bold[white]%} %{$fg_bold[red]%}%b %{$reset_color%}%m%u%c%{$reset_color%}"
    zstyle ':vcs_info:git*+set-message:*' hooks git-untracked
}

+vi-git-untracked() {
  if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == 'true' ]] && \
		    [[ $(git ls-files --other --directory --exclude-standard | sed q | wc -l | tr -d ' ') == 1 ]] ; then
    hook_com[unstaged]+='%F{red}● '
	fi
	}

#zle '-N' tetris
#zle '-N' url-quote-magic

watch=all
logcheck=30
WATCHFMT="User %n has %a on tty %l at %T %W"

setopt notify correct
setopt correctall autocd
setopt short_loops
setopt nohup
setopt extended_history hist_ignore_dups hist_expire_dups_first
setopt INC_APPEND_HISTORY
setopt extendedglob
setopt interactivecomments
setopt hist_ignore_all_dups
setopt auto_remove_slash
setopt short_loops
setopt rmstarsilent
setopt prompt_subst
setopt complete_in_word
setopt always_to_end

typeset -A abbreviations
abbreviations=(
  "Im"    "| more"
  "Ia"    "| awk"
  "Ig"    "| grep"
  "Ieg"   "| egrep"
  "Ih"    "| head"
  "It"    "| tail"
  "Is"    "| sort"
  "Iw"    "| wc"
  "Ix"    "| xargs"
)

## alias to show the date
alias da='date "+%Y-%m-%d %A %T %Z"'

## Alias's to modified commands
alias grep='grep --color=auto'
alias mkdir='mkdir -p'
alias ps='ps auxf'
alias ping='ping -c 10'
alias less='less -R'
alias cls='clear'
alias multitail='multitail --no-repeat -c'
#alias vim='nvim'
alias vi='nvim'
alias vis='nvim "+set si"'
alias df='df -hT'
alias ip="ip -c"
alias jq='jq -C'

## Change directory aliases
alias home='cd ~'
alias cd..='cd ..'
alias ..='cd ..'
alias ...='cd ../..'
alias ....='cd ../../..'
alias .....='cd ../../../..'

## Alias's for multiple directory listing commands
alias l="ls"
alias ls="ls --color=auto --classify $*"
alias la='ls -Alh' ## show hidden files
alias lx='ls -lXBh' ## sort by extension
alias lk='ls -lSrh' ## sort by size
alias lc='ls -lcrh' ## sort by change time
alias lu='ls -lurh' ## sort by access time
alias lr='ls -lRh' ## recursive ls
alias lt='ls -ltrh' ## sort by date
alias lart='ls -larth' ## sort by date with hidden
alias lm='ls -alh |more' ## pipe through 'more'
alias lw='ls -xAh' ## wide listing format
alias ll='ls -Flh' ## long listing format
alias labc='ls -lap' ##alphabetical sort
alias lf="ls -l | egrep -v '^d'" ## files only
alias ldir="ls -l | egrep '^d'" ## directories only

## cd into the old directory
alias bd='cd "$OLDPWD"'

## Remove a directory and all files
alias rmd='/bin/rm  --recursive --force --verbose '

## alias chmod commands
alias mx='chmod a+x'
alias 000='chmod -R 000'
alias 644='chmod -R 644'
alias 666='chmod -R 666'
alias 755='chmod -R 755'
alias 777='chmod -R 777'

## Globl aliases
alias -g '....'='../../..'
alias -g M="| more"
alias -g H="| head"
alias -g T="| tail"
alias -g G="| grep"
alias -g L="| less"
alias -g LL="2>&1 | less"
alias -g CA="2>&1 | cat -A"
alias -g NE="2> /dev/null"
alias -g NUL="> /dev/null 2>&1"

## Search running processes
alias p="ps aux | grep "

## Search files in the current folder
alias f="find . | grep "

## Count all files (recursively) in the current folder
alias countfiles="for t in files links directories; do echo \`find . -type \${t:0:1} | wc -l\` \$t; done 2> /dev/null"

## Alias to show disk space and space used in a folder
alias folders='du -h --max-depth=1'
alias folderssort='find . -maxdepth 1 -type d -print0 | xargs -0 du -sk | sort -rn'
alias tree='tree -CAhF --dirsfirst'
alias treed='tree -CAFd'

## Alias's for archives
alias mktar='tar -cvf'
alias mkbz2='tar -cvjf'
alias mkgz='tar -cvzf'
alias untar='tar -xvf'
alias unbz2='tar -xvjf'
alias ungz='tar -xvzf'

## SHA1
alias sha1='openssl sha1'

## git aliases
alias gall='git log --graph --full-history --all --color --pretty=tformat:"%x1b[31m%h%x09%x1b[32m%d%x1b[0m%x20%s%x20%x1b[33m(%an)%x1b[0m"'
alias glog="git log --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"
alias glog1='git log --color --format=oneline --decorate'

## Other aliases
alias su="su -"

## binds
bindtc (){
            setopt localoptions
            local keyval=$(echotc "$1" 2>&-)
            [[ $keyval == "no" ]] && keyval=""
            bindkey "${keyval:-$2}" "$3"
}

bindtc kP "^[[I" history-beginning-search-backward
bindtc kN "^[[G" history-beginning-search-forward
bindtc kh "^[[H" beginning-of-line
bindtc kH "^[[F" end-of-line

bindkey "\e[3~" delete-char
bindkey '\e[1~' beginning-of-line
bindkey '\e[4~' end-of-line
bindkey "^[[3" backward-delete-word
bindkey "^[OF" end-of-line
bindkey "^[OH" beginning-of-line
bindkey "^[a" accept-and-hold >/dev/null 2>&1

#bindkey "^R" history-incremental-search-backward
#bindkey '^T' tetris

## plugins and helpers
plugins_src=(
    $HOME/.zsh/plugins/kubeps1.zsh
    $HOME/.zsh/plugins/grc.zsh
    $HOME/.zsh/plugins/helm.zsh
    $HOME/.zsh/plugins/colorize.zsh
    $HOME/.zsh/plugins/zsh_reload.zsh
    $HOME/.zsh/plugins/nmap.zsh
    $HOME/.zsh/plugins/kubectl.zsh
    $HOME/.zsh/plugins/fzf-completion.zsh
    $HOME/.zsh/plugins/fzf-key-bindings.zsh
    $HOME/.zsh/plugins/fzf-tab.zsh
)

for f ($^plugins_src(.N)) source $f
unset plugins_src

## needed for prompt
dir_file_count (){
    /bin/ls -Alh -1 | /usr/bin/wc -l
}

## check external ip address
myip (){
    ip=$(curl -s https://api.ipify.org)
    echo "My public IP: $ip"
}

## Extracts any archive(s) (if unp isn't installed)
extract () {
    for archive in $*; do
        if [ -f $archive ] ; then
            case $archive in
                *.tar.bz2)   tar xvjf $archive    ;;
                *.tar.gz)    tar xvzf $archive    ;;
                *.bz2)       bunzip2 $archive     ;;
                *.rar)       rar x $archive       ;;
                *.gz)        gunzip $archive      ;;
                *.tar)       tar xvf $archive     ;;
                *.tbz2)      tar xvjf $archive    ;;
                *.tgz)       tar xvzf $archive    ;;
                *.zip)       unzip $archive       ;;
                *.Z)         uncompress $archive  ;;
                *.7z)        7z x $archive        ;;
                *)           echo "don't know how to extract '$archive'..." ;;
            esac
        else
            echo "'$archive' is not a valid file!"
        fi
    done
}

## Searches for text in all files in the current folder
ftext (){
    grep -iIHrn --color=always "$1" . | less -r
}

## Copy file with a progress bar
cpp(){
    set -e
    strace -q -ewrite cp -- "${1}" "${2}" 2>&1 \
    | awk '{
    count += $NF
    if (count % 10 == 0) {
        percent = count / total_size * 100
        printf "%3d%% [", percent
        for (i=0;i<=percent;i++)
            printf "="
            printf ">"
            for (i=percent;i<100;i++)
                printf " "
                printf "]\r"
            }
        }
    END { print "" }' total_size=$(stat -c '%s' "${1}") count=0
}

## Copy and go to the directory
cpg (){
    if [ -d "$2" ];then
        cp $1 $2 && cd $2
    else
        cp $1 $2
    fi
}

## Move and go to the directory
mvg (){
    if [ -d "$2" ];then
        mv $1 $2 && cd $2
    else
        mv $1 $2
    fi
}

## Create and go to the directory
mkdirg (){
    mkdir -p $1
    cd $1
}

## Goes up a specified number of directories  (i.e. up 4)
up (){
    local d=""
    limit=$1
    for ((i=1 ; i <= limit ; i++))
        do
            d=$d/..
        done
    d=$(echo $d | sed 's/^\///')
    if [ -z "$d" ]; then
        d=..
    fi
    cd $d
}

## better history
h() {
        if [ -z "$*" ];
           then history 1;
           else history 1 | egrep "$@";
           fi;
}
## remove all comments in given file
decomment () {
        egrep -v '^([[:space:]]*##|$)' $@
}

## generate random password
genpwd() {
    cset="[:alnum:]"
    len=14

    while getopts "h?fn:" opt; do
        case $opt in
            f) cset="[:graph:]" ;;
            n) len=$OPTARG      ;;
        esac
done

printf "%s\n" $(cat /dev/urandom | env LC_CTYPE=C tr -cd "$cset" | head -c $len )
}

## remove spaces in filenames
space_rm() {
    for file in *; do
        mv ${file} ${file:gs/\ /./}
    done
}

## self explanatory
lowercase_mv() {
    for file in *; do
        mv ${file} ${file//(#m)[A-Z]/${(L)MATCH}}
    done
}
## DIE SATANA!
die() {
    echo $1
    return 0
}

## Trim leading and trailing spaces (for scripts)
trim(){
    local var=$@
    var="${var##"${var%%[![:space:]]*}"}"  ## remove leading whitespace characters
    var="${var%"${var####*[![:space:]]}"}"  ## remove trailing whitespace characters
    echo -n "$var"
}

users=(shpaq root )
zstyle ':completion:*' users $users

if [[ -f ~/.ssh/known_hosts ]]; then
    _myhosts=(${${${${${${(f)"$(<$HOME/.ssh/known_hosts)"}:##[0-9]*}%%\ *}%%,*}##\[}/]:*/})
    zstyle ':completion:*' hosts $_myhosts
fi


## functions
function zsh_stats() {
  fc -l 1 \
    | awk '{ CMD[$2]++; count++; } END { for (a in CMD) print CMD[a] " " CMD[a]*100/count "% " a }' \
    | grep -v "./" | sort -nr | head -n20 | column -c3 -s " " -t | nl
}

function zsh_alias_value() {
    (( $+aliases[$1] )) && echo $aliases[$1]
}

function zsh_plugins() {
    for plugin in $HOME/.zsh/plugins/*; do
        echo "\nPlugin: $plugin" ;\
        grep -r "^function \w*" $plugin | awk '{print $2}' | sed 's/()//'| sed ':a;N;$!ba;s/\n/, /g';\
        grep -r "^alias" $plugin | awk '{print $2}' | sed 's/=.*//' |  sed ':a;N;$!ba;s/\n/, /g';
    done
}

## prompt
##precmd () { dir_file_count }
precmd () { vcs_info }
#NEWLINE=$'\n'
#$(git_prompt_info)$(git_remote_status)

local return_status="%{$fg[red]%}%(?.. #)%{$reset_color%}"
PROMPT='%{$fg_bold[red]%}%m%{$reset_color%}%{$fg_bold[white]%}:%{$reset_color%}%{$fg_bold[yellow]%}%10c%{$reset_color%}%{$fg_bold[white]%}:%{$fg_bold[magenta]%}$(dir_file_count)
$(kube_ps1)${vcs_info_msg_0_}%{$fg_bold[red]%}→%{$reset_color%} '
#sRPROMPT='${return_status}%{$reset_color%}'
