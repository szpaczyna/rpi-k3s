apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "octant.fullname" . }}
  labels:
    {{- include "octant.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      {{- include "octant.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- include "octant.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ include "octant.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
      {{- if .Values.plugins.install }}
        - name: plugins-installer
          image: alpine:latest
          imagePullPolicy: Always
          command:
            - /bin/sh
            - -c
            - |
              echo "Downloading plugins"

              OCTANT_PLUGINS_DIR=${OCTANT_PLUGINS_DIR%/}
              OCTANT_PLUGINS_DIR=${OCTANT_PLUGINS_DIR:-/home/octant/.config/octant/plugins}

              mkdir ${OCTANT_PLUGINS_DIR}/tmp
              for plugin in ${OCTANT_PLUGINS_LIST}; do
                # Extracting the plugin filename from HTTP path
                plugin_file=$(echo "${plugin}" | rev | cut -d'/' -f1 | rev)

                echo "Downloading plugin: ${plugin}"
                wget -q ${plugin}

                if [[ $? -ne 0 ]]; then
                  echo "Error downloading plugin"
                  continue
                fi;

                tar -xz -C ${OCTANT_PLUGINS_DIR}/tmp -f ${plugin_file}
              done

              find ${OCTANT_PLUGINS_DIR}/tmp -maxdepth 1 -executable -type f -exec mv {} ${OCTANT_PLUGINS_DIR} \;
              rm -fr ${OCTANT_PLUGINS_DIR}/tmp

              chown -R 1000:2000 ${OCTANT_PLUGINS_DIR}
          env:
            - name: OCTANT_PLUGINS_DIR
              value: {{ .Values.plugins.dir.mountPath | quote }}
            - name: OCTANT_PLUGINS_LIST
              value: {{ .Values.plugins.install | join " " | quote }}
          volumeMounts:
          - name: plugins-mount
            mountPath: {{ .Values.plugins.dir.mountPath | quote }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
        {{- toYaml .Values.extraInitContainers | nindent 8 }}
      {{- end }}
      containers:
        {{- if .Values.keycloakGatekeeper.enabled }}
        - name: sso
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: keycloak/keycloak-gatekeeper:latest
          imagePullPolicy: Always
          args:
          - --client-id={{ .Values.keycloakGatekeeper.clientId }}
          - --client-secret={{ .Values.keycloakGatekeeper.clientSecret }}
          - --discovery-url={{ .Values.keycloakGatekeeper.url }}
          - --listen=0.0.0.0:{{ .Values.keycloakGatekeeper.port }}
          - --upstream-url=http://127.0.0.1:{{ .Values.service.port }}
          - --enable-logging=true
          - --preserve-host=true
          - --enable-refresh-tokens=true
          - --encryption-key={{ include "idp.encryption_key" . }}
          ports:
            - name: http-sso
              containerPort: {{ .Values.keycloakGatekeeper.proxyPort }}
              protocol: TCP
        {{- end }}
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.fullname }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          env:
            - name: OCTANT_HTTP_PORT
              value: {{ .Values.service.port | quote }}
            - name: OCTANT_PLUGINS_DIR
              value: {{ .Values.plugins.dir.mountPath | quote }}
            - name: OCTANT_PLUGINS_LIST
              value: {{ .Values.plugins.install | join " " | quote }}
          {{- if .Values.extraEnvs }}
            {{- toYaml .Values.extraEnvs | nindent 12 }}
          {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          volumeMounts:
            - name: tmp-mount
              mountPath: /tmp
            - name: plugins-mount
              mountPath: {{ .Values.plugins.dir.mountPath | quote }}
              #readOnly: true
          {{- if .Values.extraVolumeMounts }}
            {{- toYaml .Values.extraVolumeMounts | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: tmp-mount
          emptyDir: {}
        - name: plugins-mount
          {{- with .Values.plugins.dir.mount }}
          {{ . | toYaml | nindent 10 }}
          {{- end }}
      {{- if .Values.extraVolumes }}
        {{- toYaml .Values.extraVolumes | nindent 8 }}
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
