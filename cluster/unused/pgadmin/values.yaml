## Default values for pgAdmin4.

replicaCount: 1
nameOverride: pgadmin4
fullNameOverride: pgadmin4

## pgAdmin4 container image
image:
  registry: docker.io
  repository: dpage/pgadmin4
  tag: "latest"
  #tag: "2021-09-06-2"
  pullPolicy: IfNotPresent

annotations: {}

service:
  type: LoadBalancer
  port: 8080
  targetPort: 8080
  portName: http
  loadBalancerIP: ""  # Set your desired IP here
  annotations: {}

serviceAccount:
  create: true
  annotations: {}
  name: ""

strategy:
  type: RollingUpdate
  rollingUpdate:
    maxSurge: 0
    maxUnavailable: 1

## Server definitions will be loaded at launch time. This allows connection
## information to be pre-loaded into the instance of pgAdmin4 in the container.
## Ref: https://www.pgadmin.org/docs/pgadmin4/latest/import_export_servers.html
##
serverDefinitions:
  enabled: true
  servers: |-
    "1": {
      "Name": "morphine Postgres",
      "Group": "Servers",
      "Port": 5432,
      "Username": "postgres",
      "Host": "morphine-postgresql",
      "HostAddr": "",
      "SSLMode": "prefer",
      "MaintenanceDB": "postgres"
    }

networkPolicy:
  enabled: true

## Ingress
ingress:
  enabled: false
  annotations: {}
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: Prefix
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# Additional config maps to be mounted inside a container
# Can be used to map config maps for sidecar as well
extraConfigmapMounts: []
  # - name: certs-configmap
  #   mountPath: /etc/ssl/certs
  #   subPath: ca-certificates.crt # (optional)
  #   configMap: certs-configmap
  #   readOnly: true

extraSecretMounts:
  - name: pgpass
    secret: postgresql-pgpass
    subPath: pgpass
    mountPath: "/var/lib/pgadmin/storage/pgadmin/file.pgpass"
    readOnly: true

extraContainers: |
# - name: proxy
#   image: quay.io/gambol99/keycloak-proxy:latest
#   args:
#   - -provider=github
#   - -client-id=
#   - -client-secret=
#   - -github-org=<ORG_NAME>
#   - -email-domain=*
#   - -cookie-secret=
#   - -http-address=http://0.0.0.0:4181
#   - -upstream-url=http://127.0.0.1:3000
#   ports:
#     - name: proxy-web
#       containerPort: 4181

## Provide the name for an existing secret.
## Useful to avoid specifying password and server config in YAML files
#existingSecret: "postgresql-pgpass"

## pgAdmin4 startup configuration
## Values in here get injected as environment variables
## Needed chart reinstall for apply changes
env:
  # can be email or nickname
  email: admin@example.com
  #password: KciV2jqf1C0nM81HImLHP06cpzBAqk05
  pgpassfile: /var/lib/pgadmin/storage/pgadmin/file.pgpass

  # set context path for application (e.g. /pgadmin4/*)
  #contextPath: /pgadmin4
  enhanced_cookie_protection: "True"

  ## Add custom environment variables that will be injected to deployment
  ## Ref: https://www.pgadmin.org/docs/pgadmin4/latest/container_deployment.html
  ##
  variables:
  # - name: PGADMIN_LISTEN_ADDRESS
  #   value: "0.0.0.0"
    - name: PGADMIN_LISTEN_PORT
      value: "8080"
    - name: PGADMIN_DEFAULT_PASSWORD
      value: "password"

persistentVolume:
  enabled: true
  annotations: {}
  accessModes:
    - ReadWriteOnce
  size: 256Mi
  storageClass: "longhorn"

## Security context to be added to pgAdmin4 pods
securityContext:
  runAsUser: 5050
  runAsGroup: 5050
  fsGroup: 5050

## pgAdmin4 readiness and liveness probe initial delay and timeout
livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 3

## Required to be enabled pre pgAdmin4 4.16 release, to set the ACL on /var/lib/pgadmin.
## Ref: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
##
VolumePermissions:
  enabled: true

## Additional InitContainers to initialize the pod
extraInitContainers: |
   - name: add-folder-for-pgpass
     image: "dpage/pgadmin4:latest"
     command: ["/bin/mkdir", "-p", "/var/lib/pgadmin/storage/pgadmin"]
     volumeMounts:
       - name: pgadmin-data
         mountPath: /var/lib/pgadmin
     securityContext:
       runAsUser: 5050

containerPorts:
  http: 8080

resources:
  limits:
    cpu: 1000m
    memory: 512Mi
  requests:
    cpu: 250m
    memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80

nodeSelector: {}
tolerations: []
affinity: {}
podAnnotations: {}
podLabels: {}
init:
  resources: {}

test:
  image:
    registry: docker.io
    repository: busybox
    tag: latest
  resources: {}
  securityContext:
    runAsUser: 5051
    runAsGroup: 5051
    fsGroup: 5051
