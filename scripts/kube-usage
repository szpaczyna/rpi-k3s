#!/usr/bin/python

import json
import kubeutilization
import sys
import os
import subprocess
import shlex
output = kubeutilization.get_usage()
# print(json.dumps(output,indent=4,sort_keys=True))


def format_pod(o):
    if o['requests']['memory'] == 0:
        mem_usage = "None"
    else:
        mem_usage = "{:.0%}".format(
            float(o['usage']['memory']) / o['requests']['memory'])
    if o['requests']['cpu'] == 0:
        cpu_usage = "None"
    else:
        cpu_usage = "{:.0%}".format(
            float(o['usage']['cpu']) / o['requests']['cpu'])

    return "{:>6} = {}/{:<6}\t{:>6} = {}/{}".format(
        cpu_usage,
        o['usage']['cpu'], o['requests']['cpu'],
        mem_usage,
        o['usage']['memory'] / 1024, o['requests']['memory'] / 1024,
    )

print("Cluster: " + subprocess.check_output(shlex.split("kubectl config current-context")))
print(
    "CPU:\n{:>10}: {:<2}%\t{}/{}\n{:>10}: {:<2}%\t{}/{}\n{:>10}: {:<2}%\t{}/{}".format(
        "Requests",
        int(100 * float(output['cluster']['requests']['cpu']
                        ) / output['cluster']['allocatable']['cpu']),
        output['cluster']['requests']['cpu'], output['cluster']['allocatable']['cpu'],

        "Limits",
        int(100 * float(output['cluster']['limits']['cpu']
                        ) / output['cluster']['allocatable']['cpu']),
        output['cluster']['limits']['cpu'], output['cluster']['allocatable']['cpu'],

        "Usage",
        int(100 * float(output['cluster']['usage']['cpu']
                        ) / output['cluster']['allocatable']['cpu']),
        output['cluster']['usage']['cpu'], output['cluster']['allocatable']['cpu'],
    ))

print(
    "Memory:\n{:>10}: {:<2}%\t{}/{}\n{:>10}: {:<2}%\t{}/{}\n{:>10}: {:<2}%\t{}/{}".format(
        "Requests",
        int(100 * float(output['cluster']['requests']['memory']
                        ) / output['cluster']['allocatable']['memory']),
        output['cluster']['requests']['memory'], output['cluster']['allocatable']['memory'],

        "Limits",
        int(100 * float(output['cluster']['limits']['memory']
                        ) / output['cluster']['allocatable']['memory']),
        output['cluster']['limits']['memory'], output['cluster']['allocatable']['memory'],

        "Usage",
        int(100 * float(output['cluster']['usage']['memory']
                        ) / output['cluster']['allocatable']['memory']),
        output['cluster']['usage']['memory'], output['cluster']['allocatable']['memory'],
    ))


out = []
for n in output.keys():
    if n == "cluster":
        continue
    o = output[n]
    for p in output[n]['pods'].keys():
        pod = output[n]['pods'][p]
        if p == "limits":

            pass
        elif p == "requests":
            pass
        elif p == "allocatable":
            pass
        elif p == "usage":
            pass
        out.append("{:<80}".format(p) + " " + format_pod(pod))
out.sort()
print("\n".join(out))
