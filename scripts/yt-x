#!/usr/bin/env python3
"""
A simplified YouTube browser script written in Python
"""

import os
import sys
import json
import subprocess
import urllib.parse
from pathlib import Path
from typing import Optional, Dict, List
import argparse

class YTX:
    def __init__(self):
        self.CLI_NAME = "yt-x"
        self.CLI_VERSION = "0.5.0"
        
        # Platform detection
        self.platform = self._detect_platform()
        
        # Setup directories
        self._setup_directories()
        
        # Load config
        self.config = self._load_config()
        
    def _detect_platform(self) -> str:
        """Detect the current platform"""
        import platform
        system = platform.system().lower()
        return "mac" if system == "darwin" else "linux"
    
    def _setup_directories(self):
        """Setup configuration directory"""
        config_home = os.environ.get('XDG_CONFIG_HOME', os.path.expanduser('~/.config'))
        self.config_dir = Path(config_home) / self.CLI_NAME
        self.config_dir.mkdir(parents=True, exist_ok=True)
    
    def _load_config(self) -> Dict[str, str]:
        """Load configuration with defaults"""
        return {
            'PLAYER': 'mpv',
            'PREFERRED_BROWSER': '',
            'NO_OF_SEARCH_RESULTS': '20',
            'PREFERRED_EDITOR': os.environ.get('EDITOR', 'nano')
        }
    
    def run_fzf(self, items: List[str], prompt: str = "") -> Optional[str]:
        """Run fzf with given items and return selected item"""
        if not items:
            return None
        
        fzf_cmd = [
            'fzf',
            '--layout=reverse',
            '--height=60%',
            f'--prompt={prompt}: ' if prompt else '--prompt=Select: ',
            '--exact',
            '--cycle'
        ]
        
        try:
            process = subprocess.Popen(
                fzf_cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            input_text = '\n'.join(items)
            stdout, stderr = process.communicate(input=input_text)
            
            if process.returncode == 0:
                return stdout.strip()
            return None
        except Exception as e:
            print(f"Error running fzf: {e}")
            return None
    
    def run_fzf_search(self, prompt: str = "Search") -> Optional[str]:
        """Run fzf in search mode to get user input"""
        fzf_cmd = [
            'fzf',
            '--print-query',
            '--layout=reverse',
            '--height=3',
            f'--prompt={prompt}: '
        ]
        
        try:
            process = subprocess.Popen(
                fzf_cmd,
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                text=True
            )
            
            stdout, stderr = process.communicate(input="")
            
            if stdout.strip():
                return stdout.strip().split('\n')[0]
            return None
        except Exception as e:
            print(f"Error running fzf search: {e}")
            return None
    
    def run_yt_dlp(self, url: str) -> Optional[Dict]:
        """Run yt-dlp and return JSON data"""
        cmd = [
            'yt-dlp',
            url,
            '-J',
            '--flat-playlist',
            '--playlist-start', '1',
            '--playlist-end', self.config['NO_OF_SEARCH_RESULTS']
        ]
        
        if self.config['PREFERRED_BROWSER']:
            cmd.extend(['--cookies-from-browser', self.config['PREFERRED_BROWSER']])
        
        try:
            result = subprocess.run(cmd, capture_output=True, text=True, check=True)
            return json.loads(result.stdout)
        except (subprocess.CalledProcessError, json.JSONDecodeError) as e:
            print(f"Error running yt-dlp: {e}")
            return None
    
    def format_video_list(self, data: Dict) -> List[str]:
        """Format video data for display in fzf"""
        if not data or 'entries' not in data:
            return []
        
        items = []
        for i, entry in enumerate(data['entries'], 1):
            title = entry.get('title', 'Unknown Title')
            channel = entry.get('channel', 'Unknown Channel')
            duration = self._format_duration(entry.get('duration'))
            
            # Simple format: "01 Title - Channel (Duration)"
            formatted = f"{i:02d} {title} - {channel} ({duration})"
            items.append(formatted)
        
        return items
    
    def _format_duration(self, duration) -> str:
        """Format duration in seconds to human readable format"""
        if not duration:
            return "Unknown"
        
        try:
            duration = int(duration)
            if duration >= 3600:
                hours = duration // 3600
                minutes = (duration % 3600) // 60
                return f"{hours}:{minutes:02d}h"
            elif duration >= 60:
                minutes = duration // 60
                seconds = duration % 60
                return f"{minutes}:{seconds:02d}"
            else:
                return f"0:{duration:02d}"
        except:
            return "Unknown"
    
    def search_videos(self, query: str) -> Optional[Dict]:
        """Search for videos"""
        encoded_query = urllib.parse.quote(query)
        url = f"https://www.youtube.com/results?search_query={encoded_query}"
        return self.run_yt_dlp(url)
    
    def play_video(self, video_data: Dict, video_index: int):
        """Play selected video"""
        if not video_data or 'entries' not in video_data:
            return
        
        if video_index < 0 or video_index >= len(video_data['entries']):
            return
        
        entry = video_data['entries'][video_index]
        video_url = entry.get('url', '')
        title = entry.get('title', 'Unknown Title')
        
        if not video_url:
            print("No video URL found")
            return
        
        print(f"Playing: {title}")
        
        try:
            subprocess.run(['mpv', video_url], check=False)
        except FileNotFoundError:
            print("mpv not found")
    
    def play_audio(self, video_data: Dict, video_index: int):
        """Play audio only"""
        if not video_data or 'entries' not in video_data:
            return
        
        entry = video_data['entries'][video_index]
        video_url = entry.get('url', '')
        title = entry.get('title', 'Unknown Title')
        
        if not video_url:
            print("No video URL found")
            return
        
        print(f"Playing audio: {title}")
        
        try:
            subprocess.run(['mpv', video_url, '--no-video'], check=False)
        except FileNotFoundError:
            print("mpv not found")
    
    def open_in_browser(self, entry: Dict):
        """Open video in browser"""
        video_url = entry.get('url', '')
        if not video_url:
            return
        
        try:
            if self.platform == "mac":
                subprocess.run(['open', video_url])
            else:
                subprocess.run(['xdg-open', video_url])
        except FileNotFoundError:
            print("Could not open browser")
    
    def video_browser(self, data: Dict):
        """Main video browser interface"""
        while True:
            video_list = self.format_video_list(data)
            if not video_list:
                print("No videos found")
                return
            
            # Add navigation options
            options = video_list + ["‚Üê Back", "‚ùå Exit"]
            
            selected = self.run_fzf(options, "Select video")
            if not selected:
                return
            
            if selected == "‚ùå Exit":
                sys.exit(0)
            elif selected == "‚Üê Back":
                return
            else:
                # Extract video index from selection
                try:
                    video_index = int(selected.split()[0]) - 1
                    self.video_action_menu(data, video_index)
                except (ValueError, IndexError):
                    continue
    
    def video_action_menu(self, data: Dict, video_index: int):
        """Show action menu for selected video"""
        actions = [
            "üé• Watch",
            "üéµ Listen",
            "üåê Open in Browser",
            "‚Üê Back"
        ]
        
        selected = self.run_fzf(actions, "Action")
        if not selected or selected == "‚Üê Back":
            return
        
        entry = data['entries'][video_index]
        
        if selected == "üé• Watch":
            self.play_video(data, video_index)
        elif selected == "üéµ Listen":
            self.play_audio(data, video_index)
        elif selected == "üåê Open in Browser":
            self.open_in_browser(entry)
    
    def main_menu(self):
        """Main application menu"""
        while True:
            options = [
                "üîç Search",
                "‚ùå Exit"
            ]
            
            selected = self.run_fzf(options, "yt-x")
            if not selected or selected == "‚ùå Exit":
                break
            
            if selected == "üîç Search":
                self.search_interface()
    
    def search_interface(self):
        """Search interface using fzf"""
        query = self.run_fzf_search("Enter search term")
        if not query:
            return
        
        print("Searching...")
        data = self.search_videos(query)
        if data:
            self.video_browser(data)
        else:
            print("Search failed or no results found")
    
    def check_dependencies(self):
        """Check if required dependencies are installed"""
        required = ['yt-dlp', 'fzf', 'mpv']
        missing = [dep for dep in required if not subprocess.run(['which', dep], capture_output=True).returncode == 0]
        
        if missing:
            print(f"Missing required dependencies: {', '.join(missing)}")
            print("Please install them to continue")
            sys.exit(1)
    
    def run(self, args=None):
        """Main entry point"""
        self.check_dependencies()
        
        if args and args.search:
            data = self.search_videos(' '.join(args.search))
            if data:
                self.video_browser(data)
        else:
            self.main_menu()


def main():
    parser = argparse.ArgumentParser(description="Simple YouTube browser for the terminal")
    parser.add_argument('-S', '--search', nargs='+', help='Search for videos')
    parser.add_argument('-v', '--version', action='version', version='yt-x 0.5.0')
    
    args = parser.parse_args()
    
    ytx = YTX()
    ytx.run(args)


if __name__ == "__main__":
    main()
