---
# Source: docker-registry-ui/templates/reg-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: registry
  labels:
    app: registry
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
data:
  config.yml: |-
    version: 0.1
    log:
      fields:
        service: registry
    storage:
      delete:
        enabled: true
      cache:
        blobdescriptor: inmemory
      filesystem:
        rootdirectory: /var/lib/registry
    http:
      addr: :5000
      headers:
        X-Content-Type-Options: [nosniff]
        Access-Control-Allow-Origin: ['*']
        Access-Control-Allow-Methods: ['HEAD', 'GET', 'OPTIONS', 'DELETE']
        Access-Control-Allow-Headers: ['Authorization']
        Access-Control-Max-Age: [1728000]
        Access-Control-Allow-Credentials: [true]
        Access-Control-Expose-Headers: ['Docker-Content-Digest']
---
# Source: docker-registry-ui/templates/reg-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    app: registry
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
  name: registry-pvc
spec:
  accessModes:
    - "ReadWriteOnce"
  resources:
    requests:
      storage: 30Gi
  storageClassName: "nfs-storage"
---
# Source: docker-registry-ui/templates/reg-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry
  labels:
    app: registry
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
spec:
  type: ClusterIP
  ports:
    - port: 5000
      targetPort: registry
      protocol: TCP
      name: registry
  selector:
      app: registry
      release: registry
---
# Source: docker-registry-ui/templates/ui-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: registry-ui
  labels:
    app: registry-ui
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
      app: registry-ui
      release: registry
---
# Source: docker-registry-ui/templates/reg-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry
  labels:
    app: registry
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry
      release: registry
  template:
    metadata:
      labels:
        app: registry
        release: registry
    spec:
      volumes:
        - name: config
          configMap:
            defaultMode: 420
            name: registry
        - name: data
          persistentVolumeClaim:
            claimName: registry-pvc
      containers:
        - name: registry
          image: "docker.io/registry:2.7.1"
          imagePullPolicy: IfNotPresent
          ports:
            - name: registry
              containerPort: 5000
              protocol: TCP
          volumeMounts:
            - mountPath: "/var/lib/registry"
              name: "data"
            - mountPath: "/etc/docker/registry"
              name: "config"
          livenessProbe:
            httpGet:
              path: /v2/
              port: registry
          readinessProbe:
            httpGet:
              path: /v2/
              port: registry
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: docker-registry-ui/templates/ui-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: registry-ui
  labels:
    app: registry-ui
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: registry-ui
      release: registry
  template:
    metadata:
      labels:
        app: registry-ui
        release: registry
    spec:
      containers:
        - name: registry-ui
          image: "docker.io/joxit/docker-registry-ui:arm32v7-static"
          imagePullPolicy: IfNotPresent
          env:
            - name: REGISTRY_TITLE
              value: "Docker registry UI"
            - name: DELETE_IMAGES
              value: "true"
            - name: REGISTRY_URL
              value: "http://registry:5000"
            - name: PULL_URL
              value: "registry.k3s.shpaq.org"
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: http
          readinessProbe:
            httpGet:
              path: /
              port: http
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
---
# Source: docker-registry-ui/templates/ui-ingress.yaml
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: registry-ui
  labels:
    app: registry-ui
    chart: docker-registry-ui-0.1.0
    release: registry
    app/version: "1.2.1"
  annotations:
    cert-manager.io/cluster-issuer: letsencrypt-prod
    kubernetes.io/ingress.class: traefik
    traefik.frontend.redirect.permanent: "true"
    traefik.ingress.kubernetes.io/frontend-entry-points: http, https
    traefik.ingress.kubernetes.io/redirect-entry-point: https
spec:
  tls:
    - hosts:
        - "registry.k3s.shpaq.org"
      secretName: registry-k3s-shpaq-org-tls
  rules:
    - host: "registry.k3s.shpaq.org"
      http:
        paths:
          - path: /
            backend:
              serviceName: registry-ui
              servicePort: http
