---
apiVersion: v1
kind: ConfigMap
metadata:
  name: logstash-config
data:
  logstash.yml: |
     http.host: "0.0.0.0"
     node.name: "logstash"
     config.reload.automatic: true
     config.reload.interval: 60s
  pipelines.yml: |
    - pipeline.id: pihole
      path.config: "/etc/logstash/conf.d/10-pihole.conf"
    - pipeline.id: auth
      path.config: "/etc/logstash/conf.d/20-auth.conf"
  log4j2.properties: |
    status = error
    name = LogstashPropertiesConfig

    appender.console.type = Console
    appender.console.name = plain_console
    appender.console.layout.type = PatternLayout
    appender.console.layout.pattern = [%d{ISO8601}][%-5p][%-25c]%notEmpty{[%X{pipeline.id}]}%notEmpty{[%X{plugin.id}]} %m%n

    appender.json_console.type = Console
    appender.json_console.name = json_console
    appender.json_console.layout.type = JSONLayout
    appender.json_console.layout.compact = true
    appender.json_console.layout.eventEol = true

    rootLogger.level = ${sys:ls.log.level}
    rootLogger.appenderRef.console.ref = ${sys:ls.log.format}_console
  jvm.options: |
    -Xms256M
    -Xmx256M
    -XX:CMSInitiatingOccupancyFraction=75
    -XX:+UseCMSInitiatingOccupancyOnly
    -Djava.io.tmpdir=/tmp
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:HeapDumpPath=data
  dns: "HOSTNAMEPTR \\b(?:[\\._0-9A-Za-z][0-9A-Za-z-]{0,62})(?:\\.(?:[\\._0-9A-Za-z][0-9A-Za-z-]{0,62}))*(\\.?|\\b)\r\nNODATA
    NODATA-[[:word:]]+\r\nSRV _+.+\\S\r\nFQDN \\b(?:[\\w-][\\w-]{0,62})(?:\\.(?:[\\w-][\\w-]{0,62}))*(\\.?|\\b)\r\nDNSMASQPREFIX
    %{SYSLOGTIMESTAMP:date} %{SYSLOGPROG}: %{INT:logrow} %{IP:source_host}\\/%{POSINT:source_port}\r\nURI
    %{URIPROTO}:(//)?(?:%{URIHOST})?(?:%{URIPATH})?\r\n"
  sshd: |+
    PAM_MODULE_NAME pam_\w+
    PAM_MESSAGE_AUTHFAIL authentication failure;\s*%{GREEDYDATA:pam_kvdata}
    PAM_MESSAGE_SESSOPEN session opened for user %{USER:pam_user} by %{DATA:pam_openedby}\(%{GREEDYDATA:pam_kvdata}\)
    PAM_MESSAGE_SESSCLOSED session closed for user %{USER:pam_user}
    PAM_MESSAGE_GENERIC %{GREEDYDATA}
    PAM_MESSAGE %{PAM_MESSAGE_AUTHFAIL}|%{PAM_MESSAGE_SESSOPEN}|%{PAM_MESSAGE_SESSCLOSED}|%{PAM_MESSAGE_GENERIC}
    PAM %{PAM_MODULE_NAME:pam_module}\(%{DATA:pam_service}:%{WORD:pam_module_interface}\): %{PAM_MESSAGE:pam_message}
    SSH_AUTHFAIL_WRONGUSER Failed %{WORD:ssh_authmethod} for invalid user %{USERNAME:ssh_user} from %{IP:ssh_client_ip} port %{NUMBER:ssh_client_port} (?<ssh_protocol>\w+\d+)
    SSH_AUTHFAIL_WRONGCREDS Failed %{WORD:ssh_authmethod} for %{USERNAME:ssh_user} from %{IP:ssh_client_ip} port %{NUMBER:ssh_client_port} (?<ssh_protocol>\w+\d+)
    SSH_AUTH_SUCCESS Accepted %{WORD:ssh_authmethod} for %{USERNAME:ssh_user} from %{IP:ssh_client_ip} port %{NUMBER:ssh_client_port} (?<ssh_protocol>\w+\d+)(?:: %{WORD:ssh_pubkey_type} %{GREEDYDATA:ssh_pubkey_fingerprint})?
    SSH_DISCONNECT Received disconnect from %{IP:ssh_client_ip} port %{INT:ssh_client_port}.*?:\s+%{GREEDYDATA:ssh_disconnect_reason}
    SUDO \s*%{USERNAME:sudo_user}\s*:\s*TTY=%{DATA:sudo_tty}\s*;\s*PWD=%{DATA:sudo_pwd}\s*;\s*USER=%{DATA:sudo_targetuser}\s*;\s*COMMAND=%{GREEDYDATA:sudo_command}
    SU \+\s+%{DATA:su_tty}\s+%{USER:su_user}:%{USER:su_targetuser}
    SYSTEMD_LOGIND_NEW New session %{INT:systemd_login_sessionid} of user %{USER:systemd_login_user}\.
    SYSTEMD_LOGIND_REMOVED Removed session %{INT:systemd_login_sessionid}\.
    SYSTEMD_LOGIND %{SYSTEMD_LOGIND_NEW}|%{SYSTEMD_LOGIND_REMOVED}
    USERMOD_CHANGE (?<account_action>change) user '%{USER:account_name}' %{WORD:account_attribute}( from '%{DATA:account_from}' to '%{DATA:account_to}')?
    USERMOD_GROUP_MEMBERSHIP (?<account_action>add|delete) '%{USER:account_name}' (?:to|from) %{DATA:account_grouptype} '%{DATA:account_groupname}'
    USERMOD %{USERMOD_CHANGE}|%{USERMOD_GROUP_MEMBERSHIP}
    NEW_ACCOUNT new %{DATA:account_type}:\s+%{GREEDYDATA:account_kvdata}
    ACCOUNT_ADD %{NEW_ACCOUNT}|%{USERMOD_GROUP_MEMBERSHIP}
    USERDEL_USER (?<account_action>delete) user '%{USER:account_name}'
    USERDEL_GROUP (?<account_action>remove)d %{DATA:account_grouptype} '%{DATA:account_groupname}' owned by '%{DATA:account_groupowner}'
    USERDEL_GROUP_DELUSER (?<account_action>delete) '%{USER:account_name}' from %{DATA:account_grouptype} '%{DATA:account_groupname}'
    USERDEL %{USERDEL_USER}|%{USERDEL_GROUP}|%{USERDEL_GROUP_DELUSER}
    GROUPDEL %{DATA:account_type} '%{USER:account_name}' removed( from %{GREEDYDATA:account_repository})?
  10-pihole.conf: "input {\n       beats {\n       port => 5044\n       type => \"logs\"\n
    \      tags => [\"pihole\",\"5044\"]\n       }\n}\n\nfilter {\n\n  if \"pihole\"
    in [tags] {\n    grok {\n      patterns_dir => [\"/etc/logstash/patterns/\"]\n
    \     match => {\n                \"message\" => [\n\n # request - query type\n
    \"^%{DNSMASQPREFIX} query\\[%{DATA:query_type}\\] %{FQDN:domain_request} from
    %{IP:request_from}$\",\n\n # reponse domain to ip\n \"^%{DNSMASQPREFIX} reply
    %{FQDN:domain_request} is %{IP:ip_response}$\",\n\n # response domain is NXDOMAIN\n
    \"^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is NXDOMAIN$\",\n\n # response
    config domain is NXDOMAIN\n \"^%{DNSMASQPREFIX} config %{FQDN:domain_request}
    is NXDOMAIN$\",\n\n # response config domain is no-DATA\n \"^%{DNSMASQPREFIX}
    config %{FQDN:domain_request} is NODATA-IPv[4,6]$\",\n\n # reponse domain to ip
    cname\n \"^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is \\<CNAME\\>$\",\n\n
    # respone ip to domain\n \"^%{DNSMASQPREFIX} reply %{IP:ip_request} is %{FQDN:domain_response}$\",\n\n
    # piholed\n \"^%{DNSMASQPREFIX} \\/etc\\/pihole\\/gravity\\.list %{FQDN:blocked_domain}
    is %{IP:pihole}$\",\n\n # piholed 5.0\n \"^%{DNSMASQPREFIX} gravity blocked %{FQDN:blocked_domain}
    is %{IP:pihole}$\",\n\n # piholed local\n \"^%{DNSMASQPREFIX} \\/etc\\/pihole\\/local\\.list
    %{FQDN:blocked_domain} is %{IP:pihole}$\",\n\n # piholed CNAME inspection\n \"^%{DNSMASQPREFIX}
    reply %{FQDN:domain_request} is blocked during CNAME inspection\",\n \n # blacklist\n
    \"^%{DNSMASQPREFIX} \\/etc\\/pihole\\/black\\.list %{FQDN:blocked_domain} is %{IP:pihole}$\",\n\n
    # regex\n \"^%{DNSMASQPREFIX} \\/etc\\/pihole\\/regex\\.list %{FQDN:blocked_domain}
    is %{IP:pihole}$\",\n\n # reverse response etc hosts ip to domain\n \"^%{DNSMASQPREFIX}
    \\/etc\\/hosts %{IP:ip_request} is %{FQDN:domain_response}$\",\n\n # reverse response
    etc hosts domain to ip\n \"^%{DNSMASQPREFIX} \\/etc\\/hosts %{FQDN:domain_request}
    is %{IP:ip_response}$\",\n\n # forward dns to\n \"^%{DNSMASQPREFIX} forwarded
    %{FQDN:domain_request_forward} to %{IP:dns_forward_to}$\",\n\n # cached domain
    to ip\n \"^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is %{IP:ip_response}$\",\n\n
    # cached ip to domain\n \"^%{DNSMASQPREFIX} cached %{IP:ip_request} is %{FQDN:domain_response}$\",\n\n
    # cached is srv\n \"^%{DNSMASQPREFIX} cached %{SRV} is \\<SRV\\>$\",\n\n # response
    is srv\n \"^%{DNSMASQPREFIX} reply %{SRV} is \\<SRV\\>$\",\n\n # cached domain
    to ip cname\n \"^%{DNSMASQPREFIX} cached %{FQDN:domain_request} is \\<CNAME\\>$\",\n\n
    # cached domain is NXDOMAIN\n \"^%{DNSMASQPREFIX} cached %{FQDN:domain_request}
    is NXDOMAIN$\",\n\n # cached domain is no-DATA\n \"^%{DNSMASQPREFIX} cached %{FQDN:domain_request}
    is NODATA-IPv[4,6]$\",\n\n # cached domain is no-DATA\n \"^%{DNSMASQPREFIX} cached
    %{FQDN:domain_request} is NODATA$\",\n\n # domain is no-DATA\n \"^%{DNSMASQPREFIX}
    reply %{FQDN:domain_request} is NODATA-IPv[4,6]$\",\n\n # domain is no-DATA\n
    \"^%{DNSMASQPREFIX} reply %{FQDN:domain_request} is NODATA$\",\n\n # exactly blacklisted\n
    \"^%{DNSMASQPREFIX} exactly blacklisted %{FQDN:blocked_domain} is %{IP:pihole}$\",\n\n
    # regex blacklisted\n \"^%{DNSMASQPREFIX} regex blacklisted %{FQDN:blocked_domain}
    is %{IP:pihole}$\",\n\n\n # PTR - delete?\n #\"^%{DNSMASQPREFIX} query\\[%{WORD:query_type}\\]
    %{HOSTNAMEPTR:request} from %{IP:request_from}$\",\n\n # PTR forwarded - delete?\n
    #\"^%{DNSMASQPREFIX} forwarded %{HOSTNAMEPTR:request} to %{IP:dns_forward_to}$\"
    ,\n\n # clients sending url instead of domain\n \"^%{DNSMASQPREFIX} (query\\[.*\\]|config|forwarded|reply|cached)
    %{URI:URI}.*$\",\n\n # SERVAIL\n \"^%{DNSMASQPREFIX} reply error is SERVFAIL\"\n\n
    \                 ]\n      }\n}\n\n# to do cached and cached reverse\n\n      if
    [message] =~ \"cached\" and [message] =~ \"NXDOMAIN\" {\n        mutate {\n          add_tag
    => [ \"cached NXDOMAIN\" ]\n        }\n      }\n\n      else if [NODATA] {\n        mutate
    {\n          add_tag => [ \"NODATA\" ]\n        }\n      }\n\n      else if [request_from]
    and [message] =~ \"query\" {\n        mutate {\n          add_tag => [ \"request
    and query type\" ]\n        }\n      }\n\n      else if [ip_response] and [message]
    =~ \"reply\" {\n        geoip {\n          source => \"ip_response\"\n        }\n
    \       mutate {\n          add_tag => [ \"response domain to ip\" ]\n        }\n
    \     }\n\n      else if [message] =~ \"CNAME\" and [message] =~ \"reply\" {\n
    \       mutate {\n          add_tag => [ \"response domain to ip CNAME\" ]\n        }\n
    \     }\n\n      else if [domain_response] and [message] =~ \"reply\" {\n        mutate
    {\n          add_tag => [ \"response ip to domain\" ]\n        }\n        geoip
    {\n          source => \"ip_request\"\n        }\n      }\n\n      else if [blocked_domain]
    {\n        mutate {\n          add_tag => [ \"piholed\" ]\n        }\n      }\n\n
    \     else if [message] =~ \"\\/etc\\/hosts\" {\n        mutate {\n          add_tag
    => [ \"reverse hostsfile\" ]\n        }\n      }\n\n      else if [dns_forward_to]
    {\n        mutate {\n          add_tag => [ \"dns forward\" ]\n        }\n      }\n\n
    \     else if [ip_request] and [message] =~ \"cached\" {\n        mutate {\n          add_tag
    => [ \"cached ip to domain\" ]\n        }\n        geoip {\n          source =>
    \"ip_request\"\n        }\n      }\n\n      else if [domain_request] and [message]
    =~ \"cached\" and [message] =~ \"CNAME\" {\n        mutate {\n          add_tag
    => [ \"cached domain to ip cname\" ]\n        }\n      }\n\n      else if [domain_request]
    and [message] =~ \"cached\" {\n        mutate {\n          add_tag => [ \"cache
    domain to ip\" ]\n        }\n        geoip {\n          source => \"ip_response\"\n
    \       }\n      }\n\n      if [domain_request] {\n        geoip {\n#          cache_size
    => \"10000\"\n          source => \"domain_request\"\n        }\n      } \n      \n
    \     if [ip_response] {\n        mutate {\n          add_field => { \"ip_or_domain_response\"
    => \"%{domain_request}\" }\n        }\n      }\n\n      if [domain_response] {\n
    \       mutate {\n          add_field => { \"ip_or_domain_response\" => \"%{domain_response}\"
    }\n        }              \n      }\n\n      if [blocked_domain] {\n        mutate
    {\n          add_field => { \"ip_or_domain_response\" => \"%{blocked_domain}\"
    }\n        }\n      }\n\n  mutate {\n      add_field => {\n        \"[source_fqdn]\"
    => \"%{source_host}\"\n      }\n    }\n\n  mutate {\n      remove_field => [\"port\"]\n
    \     }\n\n    dns {\n      nameserver => \"localhost\"\n      reverse => [\"source_fqdn\"]\n
    \     action => \"replace\"\n      hit_cache_size => 10000\n      hit_cache_ttl
    => 900\n      failed_cache_size => 512\n      failed_cache_ttl => 900\n    }\n\n\n
    \ date {\n    match => [ \"date\", \"MMM  d HH:mm:ss\",\"MMM dd HH:mm:ss\" ]\n\ttimezone
    => \"Europe/Warsaw\"\t\t\t\t \n  }\n\n  }\n  \n   if \"%\" in [source_host] {\n    mutate
    {\n        gsub => [\n          \"source_host\", \"%.*$\",\"\"\n        ]\n    }\n
    \ }\n  \n}\n\n\noutput {\n  if \"pihole\" in [tags]{\n    elasticsearch {\n      hosts
    => [\"elasticsearch.morphine:9200\"]\n      manage_template => false\n      index
    => \"pihole-dns-%{+yyyy.MM.dd}\"\n    }\n  }\n}\n"
  20-auth.conf: "input {\n    beats {\n    port => 5045\n    type => \"auth\"\n    tags
    => [\"sshd\"]\n    }\n}\n\nfilter {\n    if [type] == \"auth\" {\n  grok {\n\t
    \   match => { \"message\" => [\"%{SYSLOGTIMESTAMP:[system][auth][timestamp]}
    %{SYSLOGHOST:[system][auth][hostname]} sshd(?:\\[%{POSINT:[system][auth][pid]}\\])?:
    %{DATA:[system][auth][ssh][event]} %{DATA:[system][auth][ssh][method]} for (invalid
    user )?%{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]} port
    %{NUMBER:[system][auth][ssh][port]} ssh2(: %{GREEDYDATA:[system][auth][ssh][signature]})?\",\n
    \     \"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]}
    sshd(?:\\[%{POSINT:[system][auth][pid]}\\])?: %{DATA:[system][auth][ssh][event]}
    user %{DATA:[system][auth][user]} from %{IPORHOST:[system][auth][ssh][ip]}\",\n
    \     \"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]}
    sshd(?:\\[%{POSINT:[system][auth][pid]}\\])?: Did not receive identification string
    from %{IPORHOST:[system][auth][ssh][dropped_ip]}\",\n      \"%{SYSLOGTIMESTAMP:[system][auth][timestamp]}
    %{SYSLOGHOST:[system][auth][hostname]} sudo(?:\\[%{POSINT:[system][auth][pid]}\\])?:
    \\s*%{DATA:[system][auth][user]} :( %{DATA:[system][auth][sudo][error]} ;)? TTY=%{DATA:[system][auth][sudo][tty]}
    ; PWD=%{DATA:[system][auth][sudo][pwd]} ; USER=%{DATA:[system][auth][sudo][user]}
    ; COMMAND=%{GREEDYDATA:[system][auth][sudo][command]}\",\n      \"%{SYSLOGTIMESTAMP:[system][auth][timestamp]}
    %{SYSLOGHOST:[system][auth][hostname]} groupadd(?:\\[%{POSINT:[system][auth][pid]}\\])?:
    new group: name=%{DATA:system.auth.groupadd.name}, GID=%{NUMBER:system.auth.groupadd.gid}\",\n
    \     \"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]}
    useradd(?:\\[%{POSINT:[system][auth][pid]}\\])?: new user: name=%{DATA:[system][auth][useradd][name]},
    UID=%{NUMBER:[system][auth][useradd][uid]}, GID=%{NUMBER:[system][auth][useradd][gid]},
    home=%{DATA:[system][auth][useradd][home]}, shell=%{DATA:[system][auth][useradd][shell]}$\",\n
    \     \"%{SYSLOGTIMESTAMP:[system][auth][timestamp]} %{SYSLOGHOST:[system][auth][hostname]}
    %{DATA:[system][auth][program]}(?:\\[%{POSINT:[system][auth][pid]}\\])?: %{GREEDYMULTILINE:[system][auth][message]}\"]
    }\n\n        pattern_definitions => {\n          \"GREEDYMULTILINE\"=> \"(.|\\n)*\"\n
    \       }\n        remove_field => \"message\"\n  }\n  date {\n      match =>
    [ \"[system][auth][timestamp]\", \"MMM  d HH:mm:ss\", \"MMM dd HH:mm:ss\" ]\n
    \     timezone => \"Europe/Warsaw\"\n  }\n  geoip {\n      source => \"[system][auth][ssh][ip]\"\n
    \     target => \"[system][auth][ssh][geoip]\"\n  }\n  }\n}\n\noutput {\n    if
    \"sshd\" in [tags]{\n        elasticsearch {\n            hosts => [\"elasticsearch.morphine:9200\"]\n
    \           manage_template => false\n            index => \"auth-%{+yyyy.MM.dd}\"\n
    \   }\n  }\n}\n"
